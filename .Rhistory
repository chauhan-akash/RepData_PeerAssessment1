library(httr)
install.packages("httr")
library(httr)
myapp <- oauth_app("github", key = "43cc4cb22c6f8d569f1e", secret = "b9e9c25d414884b5e31508a75053ffbd494c0948
")
myapp
rm(myapp)
library(XML)
url <- "https://api.github.com/users/jtleek/repos"
html <- htmlTreeParse(url, useInternalNodes = T)
html
?htmlTreeParse
webpage <- readLines("https://api.github.com/users/jtleek/repos")
length(webpage)
webpage
?grep
class(webpage)
str(webpage)
grep("datasharing", webpage)
?readLines
close(url)
webpage <- htmlTreeParse(url, useInternalNodes = T)
str(webpage)
xpathSApply(webpage,"//title",xmlValue)
x <- xpathSApply(webpage,"//title",xmlValue)
x
myapp <- oauth_app("github", key = "43cc4cb22c6f8d569f1e", secret="b9e9c25d414884b5e31508a75053ffbd494c0948")
test <- GET(url)
test
str(test)
?content
test1 <- content(test)
str(test1)
VIew(test1)
View(test1)
test1
test1[29]
grep("*datasharing*", test1)
test1[5]
grep("*created*", test1[5])
test1[5][1]
str(test1[5])
grep("*created*", test1[5], value = T)
wp2 <- readLines("http://biostat.jhsph.edu/~jleek/contact.html")
str(wp2)
wp2[10]
length(wp2[10])
nchar(wp2[10])
nchar(wp2[20])
nchar(wp2[30])
nchar(wp2[100])
wp3 <- readLines("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
str(wp3)
head(wp3)
head(wp3, 100)
head(wp3, 20)
wp4 <- read.table("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", sep=" ", skip=3)
wp4 <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip=3)
wp4 <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", width=9, skip=3)
head(wp4)
wp4 <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", width=9)
head(wp4)
wp4 <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", width=c(9,4,3,4,3,4,3,4,3))
head(wp4)
wp4 <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", width=c(9,4,3,4,3,4,3,4,3), skip=3)
head(wp4)
wp4 <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", width=c(9,4,3,4,3,4,3,4,3), skip=4)
head(wp4)
wp4 <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", width=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
head(wp4)
str(wp4)
sum(wp4$v4)
sum(wp4[,4])
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
mydef <- read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydef)
rm(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_gb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
View(cran)
cran[grep("[Cc]ausal", cran$pckage),]
arrange(cran, package)
test <- arrange(cran, package)
View(test)
test <- test[grep("*[Cc]*", test$package),]
test <- test[grep("*[Cc]au*", test$package),]
View(test)
swirl()
library(swirl)
swirl()
swirl()
library(dplyr)
cran <- table_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_count_sorted <- arrange(top_count, desc(count))
top_count_sorted <- arrange(top_counts, desc(count))
?arrange
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
?select
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, column_count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col=sex_class, into=c("sex","class"))
submit()
submit()
students3
View(students3)
?gather
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
?unique
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
?separate
submit()
submit()
rm(list=ls())
setwd("C:/Users/user/Desktop/coursera_courses/reproducible_research/course_project1")
dir()
act <- read.csv("activity.csv")
View(act)
?read.csv
setwd("C:/Users/user/Desktop/coursera_courses/reproducible_research/RepData_PeerAssessment1/")
?aggreagte
?aggregate
?summary
?plot
stepbyint <- aggregate(activity$steps, by=list(activity$interval), FUN="mean")
stepbyint <- aggregate(act$steps, by=list(act$interval), FUN="mean")
View(stepbyint)
stepbyint <- aggregate(act$steps, by=list(act$interval), FUN="mean", na.rm=TRUE)
View(stepbyint)
plot(stepbyint$Group.1, stepbyint$x, type="l")
?proper
is.proper
?is.na
stepbydate <- aggregate(act$steps, by=list(act$date), FUN="mean", na.rm=TRUE)
View(stepbydate)
actwona <- act[!is.na(act),]
actwona <- act[!is.na(act$steps),]
stepbydate <- aggregate(actwona$steps, by=list(actwona$date), FUN="mean")
View(stepbydate)
stepbyint <- aggregate(actwona$steps, by=list(actwona$int), FUN="mean")
View(stepbyint)
stepbyint <- aggregate(act$steps, by=list(act$int), FUN="mean")
View(stepbyint)
stepbyint <- aggregate(actwona$steps, by=list(actwona$int), FUN="mean")
View(stepbyint)
stepbyint <- aggregate(actwona$steps, by=list(actwona$int), FUN="median")
View(stepbyint)
act1 <- merge(act, stepbyint, by="interval")
View(stepbyint)
names(stepbyint) <- c("interval", "steps")
View(stepbyint)
act1 <- merge(act, stepbyint, by="interval")
View(Act1)
View(act1)
names(stepbyint) <- c("interval", "steps_new")
act1 <- merge(act, stepbyint, by="interval")
View(act1)
act1$steps[is.na(act1$steps)] <- act1$steps$steps_new
act1$steps[is.na(act1$steps)] <- act1$steps_new
act1[is.na(act1$steps)]$steps <- act1$steps_new
act1$steps[is.na(act1$steps)] <- act1$steps_new
View(act1)
act1 <- merge(act, stepbyint, by="interval")
View(act1)
act1$steps[is.na(act1$steps)] <- act1$steps_new
View(act1)
act1 <- act1[,c=("interval", "steps", "date")]
act1 <- act1[,c("interval", "steps", "date")]
View(act1)
act1 <- merge(act, stepbyint, by="interval")
View(act1)
act2 <- act1[!is.na(act1),]
act2 <- act1[!is.na(act1$steps),]
act3 <- act1[is.na(act1$steps),]
View(act3)
View(act2)
act2 <- act2[,c("interva","steps","date")]
act2 <- act2[,c("interval","steps","date")]
act3 <- act3[,c("interval","steps_new","date")]
View(act2)
View(act3)
names(act3)
names(act3)[2]
names(act3)[2] <- "steps"
names(act3)
View(act3)
act_new <- rbind(act2, act3)
View(Act_new)
View(act_new)
act_new <- act_new[order(date, interval),]
View(act_new)
act_new <- act_new[order(date),]
act_new <- act_new[order(act_new$date, act_new$interval),]
View(act_new)
?weeday
?weekday
?weekdays
str(act)
act$wkd <- weekdays(act$date)
act$wkd <- weekdays(as.Date(act$date,format="%Y-%m-%d"))
View(act)
act$wk <- ifelse(wkd == "Saturday" | "Sunday", "Weekend", "Weekday")
act$wk <- ifelse(act$wkd == "Saturday" | "Sunday", "Weekend", "Weekday")
act$wk <- ifelse(act$wkd == "Saturday", "Weekend", "Weekday")
View(act)
?ifelse
act$wk <- ifelse(act$wkd == "Saturday", "Weekend", ifelse(act$wkd == "Sunday", "Weekend", "Weekday"))
View(act)
act_wkd <- act[act$wk == "Weekday",]
act_wkend <- act[act$wk == "Weekend",]
